@page
@using NodaTime.Extensions
@using MemberService.Data.ValueTypes
@model MemberService.Pages.AnnualMeeting.IndexModel
@{
    ViewData["Title"] = Model.Title;
    Layout = "~/Pages/_CoverLayout.cshtml";
}

<div class="card shadow mt-5">
    <h3 class="card-header">
        @Model.Title
    </h3>
    <div class="card-body">
        @if (Model.HasEnded)
        {
            @Html.Markdown(Model.MeetingSummary)
        }
        else
        {
            @if (Model.IsMember)
            {
                if (Model.HasStarted)
                {
                    @Html.Markdown(Model.MeetingInfo)
                }
                else
                {
                    <div class="alert alert-info">
                        Møtet starter <strong>@Model.MeetingStartsAt.DisplayOslo()</strong>
                    </div>

                    @Html.Markdown(Model.MeetingInvitation)
                }
            }
            else
            {
                @Html.Markdown(Model.MeetingInvitation)

                <div class="alert alert-info">
                    <h4 class="alert-heading">Årsmøtet er for medlemmer av Bårdar Swing Club</h4>
                    <hr/>
                    <p>
                        For å delta på årsmøtet må du betale medlemskap for 2021. Trykk på knappen under for å betale
                        medlemskap.
                    </p>

                    <form asp-controller="Pay" asp-action="Fee" method="post" asp-route-returnUrl="/AnnualMeeting">
                        <input type="hidden" name="type" value="@Fee.Membership"/>
                        <button class="btn btn-success">Betal medlemskap</button>
                    </form>
                </div>
            }
        }
    </div>
    @if (Model.HasStarted && Model.IsMember)
    {
        var totalCount = Model.VotingResults.Responses.DistinctBy(r => r.UserId).Count();
        <ul class="list-group list-group-flush">
            @foreach (var question in Model.VotingResults.Questions)
            {
                if (question.VotingHasStarted && question.VotingHasEnded)
                {
                    var muted = question.VotingHasEnded;
                    <li class="list-group-item @(muted ? "text-muted" : "")">
                        <h5>@question.Title</h5>
                        <table class="table table-borderless table-sm">
                            @foreach (var option in question.Options)
                            {
                                var selectedBy = Model.VotingResults.Responses.Where(r => r.OptionId == option.Id).ToList();

                                var selectedByCount = selectedBy.Count;
                                <tr>
                                    <td>
                                        <strong>@option.Title</strong>
                                    </td>
                                    <td>
                                        <div class="progress">
                                            <div class="progress-bar  @(muted ? "bg-secondary" : "")" role="progressbar" style="width: @Math.Floor(selectedByCount * 100f / totalCount)%; font-weight: bold;" aria-valuenow="@selectedByCount" aria-valuemin="0" aria-valuemax="@totalCount">
                                                @selectedByCount
                                            </div>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </table>
                    </li>
                }
                else if(question.VotingHasStarted && !question.VotingHasEnded)
                {
                    var hasVoted = false;
                    <li class="list-group-item">
                        <div class="float-right badge badge-pill badge-dark" data-countdown="@question.AnswerableUntil?.ToString("o")Z" title="@question.AnswerableUntil?.DisplayOslo()">@question.AnswerableUntil?.DisplayOslo()</div>
                        <h5>
                            @question.Title
                        </h5>
                        <form method="post" asp-route-id="@Model.Id">
                            @foreach (var option in question.Options)
                            {
                                var voted = Model.VotingResults.Responses.Any(r => r.UserId == Model.UserId && r.OptionId == option.Id);
                                hasVoted |= voted;
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="option" value="@option.Id" id="@option.Id" data-val="true" data-val-required="Velg et av alternativene" checked="@voted"/>
                                    <label class="form-check-label" for="@option.Id">@option.Title</label>
                                </div>
                            }

                            @if (hasVoted)
                            {
                                <button type="submit" class="btn btn-outline-success btn-block">Endre stemmen din</button>
                            }
                            else
                            {
                                <button type="submit" class="btn btn-success btn-block">Stem</button>
                            }
                        </form>

                        @if (await AuthorizationService.IsAuthorized(User, Policy.CanEditAnnualMeeting))
                        {
                            <form class="d-flex justify-content-end mt-1" method="post" asp-controller="Questions" asp-action="EndVoting" asp-route-meetingId="@Model.Id" asp-route-questionId="@question.Id">
                                <div class="btn-group">
                                    <button type="submit" class="btn btn-outline-warning">Avslutt</button>
                                    <a class="btn btn-outline-primary" asp-controller="Questions" asp-action="EditQuestion" asp-route-meetingId="@Model.Id" asp-route-questionId="@question.Id">Rediger</a>
                                </div>
                            </form>
                        }
                    </li>
                }
                else if(await AuthorizationService.IsAuthorized(User, Policy.CanEditAnnualMeeting))
                {
                    <li class="list-group-item">
                        <h5>@question.Title</h5>
                        @foreach (var option in question.Options)
                        {
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="option" value="@option.Id" id="@option.Id" disabled />
                                <label class="form-check-label" for="@option.Id">@option.Title</label>
                            </div>
                        }

                        <form class="d-flex justify-content-end mt-1" method="post" asp-controller="Questions" asp-action="StartVoting" asp-route-meetingId="@Model.Id" asp-route-questionId="@question.Id">
                            <div class="btn-group">
                                <button type="submit" class="btn btn-outline-success">Start</button>
                                <a class="btn btn-outline-primary" asp-controller="Questions" asp-action="EditQuestion" asp-route-meetingId="@Model.Id" asp-route-questionId="@question.Id">Rediger</a>
                            </div>
                        </form>

                    </li>
                }
            }
        </ul>
    }

    @if (!Model.HasEnded && await AuthorizationService.IsAuthorized(User, Policy.CanEditAnnualMeeting))
    {
        <form class="card-body" method="post" asp-controller="Questions" asp-action="Add" asp-route-meetingId="@Model.Id">
            <button class="btn btn-outline-primary" type="submit" name="type" value="@QuestionType.Radio">
                Legg til nytt spørsmål
            </button>
        </form>
    }

    @if (await AuthorizationService.IsAuthorized(User, Policy.CanViewAnnualMeetingAttendees))
    {
        <hr />
        <h5 class="card-body">
            Deltakere
        </h5>
        <table class="card-table table">
            <tr>
                <th>Navn (@Model.Attendees.Count)</th>
                <th>Ankom</th>
                <th>Sist sett</th>
                <th>Besøkt denne siden</th>
            </tr>
            @foreach (var attendee in Model.Attendees)
            {
                <tr>
                    <td><a asp-controller="Members" asp-action="Details" asp-route-id="@attendee.UserId" target="_blank">@attendee.Name</a></td>
                    <td>@attendee.FirstVisit.DisplayOslo()</td>
                    <td>@attendee.LastVisit.DisplayOslo()</td>
                    <td>@attendee.Visits</td>
                </tr>
            }
        </table>
    }

    @if (await AuthorizationService.IsAuthorized(User, Policy.CanEditAnnualMeeting))
    {
        <div class="card-footer">
            <a asp-page="Edit" asp-route-id="@Model.Id" class="btn btn-primary">Rediger</a>
            @if (Model.HasStarted && !Model.HasEnded)
            {
                <a asp-controller="Questions" asp-action="Index" asp-route-meetingId="@Model.Id" class="btn btn-outline-secondary">Stemmer</a>
            }
            else if (Model.HasEnded && await AuthorizationService.IsAuthorized(User, Policy.CanCreateAnnualMeeting))
            {
                <a asp-page="Create" class="btn btn-outline-success">Opprett nytt årsmøte</a>
            }
        </div>
    }
</div>

<script type="module">
    for (const element of document.querySelectorAll('[data-countdown]')) {
        const timestamp = element.dataset.countdown;
        const targetDate = Date.parse(timestamp);

        const intval = setInterval(() => {
            const diff = (((targetDate - Date.now()) / 1000) | 0);
            let minutes = (diff / 60) | 0;
            let seconds = (diff % 60) | 0;

            if (minutes <= 0 && seconds <= 0) {
                element.textContent = '00:00';
                element.classList.remove("badge-dark");
                element.classList.add("badge-danger");
                clearInterval(intval);
            } else {
                minutes = minutes < 10 ? "0" + minutes : minutes;
                seconds = seconds < 10 ? "0" + seconds : seconds;

                element.textContent = `${minutes}:${seconds}`;
            }
        }, 500);
    }
</script>